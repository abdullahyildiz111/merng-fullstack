[{"D:\\merng\\client\\src\\App.js":"1","D:\\merng\\client\\src\\index.js":"2","D:\\merng\\client\\src\\ApolloProvider.js":"3","D:\\merng\\client\\src\\reportWebVitals.js":"4","D:\\merng\\client\\src\\pages\\Home.js":"5","D:\\merng\\client\\src\\pages\\Login.js":"6","D:\\merng\\client\\src\\components\\MenuBar.js":"7","D:\\merng\\client\\src\\pages\\Register.js":"8","D:\\merng\\client\\src\\components\\PostCard.js":"9","D:\\merng\\client\\src\\util\\hooks.js":"10","D:\\merng\\client\\src\\context\\auth.js":"11","D:\\merng\\client\\src\\util\\AuthRoute.js":"12","D:\\merng\\client\\src\\components\\PostForm.js":"13","D:\\merng\\client\\src\\util\\graphql.js":"14","D:\\merng\\client\\src\\components\\LikeButton.js":"15","D:\\merng\\client\\src\\components\\DeleteButton.js":"16","D:\\merng\\client\\src\\pages\\SinglePost.js":"17"},{"size":977,"mtime":1607716905539,"results":"18","hashOfConfig":"19"},{"size":456,"mtime":1607599212000,"results":"20","hashOfConfig":"19"},{"size":690,"mtime":1607599212000,"results":"21","hashOfConfig":"19"},{"size":375,"mtime":1607599212016,"results":"22","hashOfConfig":"19"},{"size":1509,"mtime":1607719490603,"results":"23","hashOfConfig":"19"},{"size":2633,"mtime":1607599212016,"results":"24","hashOfConfig":"19"},{"size":1889,"mtime":1607599212000,"results":"25","hashOfConfig":"19"},{"size":3562,"mtime":1607599212016,"results":"26","hashOfConfig":"19"},{"size":1499,"mtime":1607686603530,"results":"27","hashOfConfig":"19"},{"size":455,"mtime":1607599212016,"results":"28","hashOfConfig":"19"},{"size":1486,"mtime":1607599212000,"results":"29","hashOfConfig":"19"},{"size":442,"mtime":1607599212016,"results":"30","hashOfConfig":"19"},{"size":2082,"mtime":1607753000617,"results":"31","hashOfConfig":"19"},{"size":213,"mtime":1607599212016,"results":"32","hashOfConfig":"19"},{"size":1587,"mtime":1607677837266,"results":"33","hashOfConfig":"19"},{"size":1497,"mtime":1607771302373,"results":"34","hashOfConfig":"19"},{"size":3424,"mtime":1607764807494,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"1svqb3w",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},"D:\\merng\\client\\src\\App.js",["79"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { Container, Grid } from 'semantic-ui-react';\r\n\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './App.css';\r\nimport { AuthProvider } from './context/auth';\r\nimport AuthRoute from './util/AuthRoute';\r\n\r\n\r\nimport MenuBar from './components/MenuBar'\r\nimport Home from './pages/Home';\r\nimport Login from './pages/Login';\r\nimport Register from './pages/Register';\r\nimport SinglePost from './pages/SinglePost';\r\n\r\nfunction App() {\r\n  return (\r\n    <AuthProvider>\r\n      <Router>\r\n        <Container > \r\n          <MenuBar />\r\n          <Route exact path='/' component={Home} />\r\n          <AuthRoute exact path='/login' component={Login} />\r\n          <AuthRoute exact path='/register' component={Register} />\r\n          <Route exact path='/posts/:postId' component={SinglePost} />\r\n        </Container>\r\n      </Router>\r\n    </AuthProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["80","81"],"D:\\merng\\client\\src\\index.js",[],["82","83"],"D:\\merng\\client\\src\\ApolloProvider.js",[],["84","85"],"D:\\merng\\client\\src\\reportWebVitals.js",[],["86","87"],"D:\\merng\\client\\src\\pages\\Home.js",[],"D:\\merng\\client\\src\\pages\\Login.js",[],["88","89"],"D:\\merng\\client\\src\\components\\MenuBar.js",[],["90","91"],"D:\\merng\\client\\src\\pages\\Register.js",[],"D:\\merng\\client\\src\\components\\PostCard.js",[],"D:\\merng\\client\\src\\util\\hooks.js",[],"D:\\merng\\client\\src\\context\\auth.js",[],"D:\\merng\\client\\src\\util\\AuthRoute.js",[],"D:\\merng\\client\\src\\components\\PostForm.js",[],"D:\\merng\\client\\src\\util\\graphql.js",[],"D:\\merng\\client\\src\\components\\LikeButton.js",["92"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\nimport { Button, Icon , Label} from 'semantic-ui-react';\r\n\r\nfunction LikeButton({ user, post: { id, likeCount, likes } }) {\r\n    const [liked, setLiked] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (user && likes.find(like => like.username === user.username)) {\r\n            setLiked(true)\r\n        }\r\n        else setLiked(false)\r\n    }, [user, likes]);\r\n\r\n    const [likePost, {error}] = useMutation(LIKE_POST_MUTATION, {\r\n        variables: {postId: id},\r\n    \r\n        onError(err){\r\n         return err;\r\n         }\r\n        });\r\n\r\n    const likeButton = user ? (\r\n        liked ? (\r\n            <Button color=\"blue\">\r\n                <Icon name=\"heart\" />\r\n            </Button>\r\n        ) : (<Button color=\"blue\" basic>\r\n            <Icon name=\"heart\" />\r\n        </Button>)\r\n    ) : (\r\n            <Button as={Link} to='/login' color=\"blue\" basic>\r\n                <Icon name=\"heart\" />\r\n            </Button>\r\n        )\r\n\r\n    return (\r\n        \r\n        \r\n        <Button as='div' labelPosition='right' onClick={likePost} >\r\n        {likeButton}\r\n        <Label basic color='blue' pointing='left'>\r\n          {likeCount}\r\n        </Label>\r\n      </Button>\r\n    )\r\n}\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\nmutation likePost($postId: ID!){\r\n    likePost(postId: $postId){\r\n        id\r\n        likes{\r\n            id username\r\n        }\r\n        likeCount\r\n    }\r\n}\r\n`\r\n\r\nexport default LikeButton;","D:\\merng\\client\\src\\components\\DeleteButton.js",[],"D:\\merng\\client\\src\\pages\\SinglePost.js",["93","94"],"import React, { useContext } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/client';\r\nimport { Button, Card, Grid, Label, Image, Icon } from 'semantic-ui-react';\r\nimport moment from 'moment'\r\n\r\nimport LikeButton from '../components/LikeButton';\r\nimport DeleteButton from '../components/DeleteButton';\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction SinglePost(props) {\r\n    const postId = props.match.params.postId;\r\n    const { user } = useContext(AuthContext);\r\n\r\n    const { data: { getPost }={}, error} = useQuery(FETCH_POST_QUERY, {\r\n        variables: { postId },\r\n        onError(err){\r\n            return err\r\n        }\r\n    })\r\n\r\n    function deletePostCallback() {\r\n        props.history.push('/')\r\n    }\r\n\r\n    let postMarkup;\r\n    if (!getPost) {\r\n        postMarkup = <p>Loading post...</p>\r\n    }\r\n    else {\r\n        const { id, body, createdAt, username, comments, likes, likeCount, commentCount } =\r\n            getPost;\r\n    \r\n    postMarkup = (\r\n        <div className=\"genislik-yorum\"><br></br><br></br>\r\n            <Grid >\r\n            <Grid.Row>\r\n                <Grid.Column width={2}>\r\n                    <Image\r\n                        float='right'\r\n                        size='small'\r\n                        src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={10}>\r\n                    <Card fluid>\r\n                        <Card.Content>\r\n                            <Card.Header>\r\n                                {username}\r\n                            </Card.Header>\r\n                            <Card.Meta>\r\n                                {moment(createdAt).fromNow()}\r\n                            </Card.Meta>\r\n                            <Card.Description>\r\n                                {body}\r\n                            </Card.Description>\r\n                        </Card.Content>\r\n                        <hr />\r\n                        <Card.Content extra>\r\n                            <LikeButton user={user} post={{ id, likeCount, likes }} />\r\n                            <Button as=\"div\"\r\n                                labelPosition=\"right\"\r\n                                onClick={() => console.log('gönderiye yorum')} >\r\n                            <Button basic color=\"blue\">\r\n                                <Icon name=\"comments\" />\r\n                            </Button>\r\n                            <Label basic color=\"blue\" pointing=\"left\">\r\n                                {commentCount}\r\n                            </Label>\r\n                            </Button>\r\n                            {user && user.username === username && (\r\n                                <DeleteButton postId={id} callback={deletePostCallback} />\r\n                            )}\r\n                           \r\n                        </Card.Content>\r\n                    </Card>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n        </div>\r\n        \r\n    )\r\n}\r\n    return postMarkup;\r\n}\r\n\r\nconst FETCH_POST_QUERY = gql`\r\nquery ($postId:ID!){\r\n    getPost(postId: $postId){\r\n        id body createdAt username likeCount\r\n        likes {\r\n            username\r\n        }\r\n        commentCount\r\n        comments{\r\n            id username createdAt body\r\n        }\r\n    }\r\n}`\r\n\r\nexport default SinglePost;",{"ruleId":"95","severity":1,"message":"96","line":3,"column":21,"nodeType":"97","messageId":"98","endLine":3,"endColumn":25},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"99","replacedBy":"103"},{"ruleId":"101","replacedBy":"104"},{"ruleId":"99","replacedBy":"105"},{"ruleId":"101","replacedBy":"106"},{"ruleId":"99","replacedBy":"107"},{"ruleId":"101","replacedBy":"108"},{"ruleId":"99","replacedBy":"109"},{"ruleId":"101","replacedBy":"110"},{"ruleId":"99","replacedBy":"111"},{"ruleId":"101","replacedBy":"112"},{"ruleId":"95","severity":1,"message":"113","line":17,"column":23,"nodeType":"97","messageId":"98","endLine":17,"endColumn":28},{"ruleId":"95","severity":1,"message":"113","line":15,"column":35,"nodeType":"97","messageId":"98","endLine":15,"endColumn":40},{"ruleId":"95","severity":1,"message":"114","line":31,"column":48,"nodeType":"97","messageId":"98","endLine":31,"endColumn":56},"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","no-native-reassign",["115"],"no-negated-in-lhs",["116"],["115"],["116"],["115"],["116"],["115"],["116"],["115"],["116"],["115"],["116"],"'error' is assigned a value but never used.","'comments' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]